-- Step 1: Create VARRAY type
CREATE OR REPLACE TYPE phone_numbers AS VARRAY(3) OF VARCHAR2(15);
/

-- Step 2: Create table with VARRAY column
CREATE TABLE EMPLOYEE (
    emp_id     NUMBER PRIMARY KEY,
    emp_name   VARCHAR2(100),
    phones     phone_numbers
);

-- Step 3: Insert sample records
INSERT INTO EMPLOYEE VALUES (1, 'Amit', phone_numbers('9876543210', '9123456789'));
INSERT INTO EMPLOYEE VALUES (2, 'Bhavna', phone_numbers('9090909090'));
INSERT INTO EMPLOYEE VALUES (3, 'Chirag', phone_numbers('8000000000', '8111111111', '8222222222'));

COMMIT;

-- Step 4: Procedure for Insert/Update/Delete
CREATE OR REPLACE PROCEDURE manage_employee_phones (
    p_emp_id      IN NUMBER,
    p_action      IN VARCHAR2,
    p_phone       IN VARCHAR2,
    p_new_phone   IN VARCHAR2 DEFAULT NULL
) IS
    v_phones phone_numbers;
    v_new    phone_numbers := phone_numbers();
    found BOOLEAN := FALSE;
BEGIN
    SELECT phones INTO v_phones 
    FROM EMPLOYEE 
    WHERE emp_id = p_emp_id;

    -- INSERT
    IF UPPER(p_action) = 'INSERT' THEN
        IF v_phones.COUNT < 3 THEN
            v_phones := v_phones MULTISET UNION phone_numbers(p_phone);
            DBMS_OUTPUT.PUT_LINE('Phone inserted.');
        ELSE
            DBMS_OUTPUT.PUT_LINE('Cannot insert: Maximum 3 phone numbers allowed.');
        END IF;

    -- UPDATE
    ELSIF UPPER(p_action) = 'UPDATE' THEN
        FOR i IN 1..v_phones.COUNT LOOP
            IF v_phones(i) = p_phone THEN
                v_phones(i) := p_new_phone;
                found := TRUE;
                DBMS_OUTPUT.PUT_LINE('Phone updated.');
                EXIT;
            END IF;
        END LOOP;
        IF NOT found THEN
            DBMS_OUTPUT.PUT_LINE('Phone not found for update.');
        END IF;

    -- DELETE
    ELSIF UPPER(p_action) = 'DELETE' THEN
        FOR i IN 1..v_phones.COUNT LOOP
            IF v_phones(i) != p_phone THEN
                v_new := v_new MULTISET UNION phone_numbers(v_phones(i));
            END IF;
        END LOOP;
        v_phones := v_new;
        DBMS_OUTPUT.PUT_LINE('Phone deleted.');

    ELSE
        DBMS_OUTPUT.PUT_LINE('Invalid action.');
    END IF;

    UPDATE EMPLOYEE SET phones = v_phones WHERE emp_id = p_emp_id;
END;
/


EXEC manage_employee_phones(1, 'INSERT', '9333333333');
EXEC manage_employee_phones(2, 'UPDATE', '9090909090', '9444444444');
EXEC manage_employee_phones(3, 'DELETE', '8222222222');



